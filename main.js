!function(){"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e){var n=e.baseUrl,r=e.authorization;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._baseUrl=n,this._auth=r}var n,r;return n=t,(r=[{key:"_checkResponse",value:function(e){return e.ok?e.json():Promise.reject("".concat(e.status," error!"))}},{key:"getUserInfo",value:function(){var e=this;return fetch(this._baseUrl+"/users/me",{headers:{authorization:this._auth}}).then((function(t){return e._checkResponse(t)}))}},{key:"getGroupCards",value:function(){var e=this;return fetch(this._baseUrl+"/cards",{headers:{authorization:this._auth}}).then((function(t){return e._checkResponse(t)}))}},{key:"updateProfile",value:function(e){var t=this,n=e.name,r=e.about;return fetch(this._baseUrl+"/users/me",{method:"PATCH",headers:{authorization:this._auth,"Content-Type":"application/json"},body:JSON.stringify({name:n,about:r})}).then((function(e){return t._checkResponse(e)}))}},{key:"updateAvatar",value:function(e){var t=this,n=e.avatar;return fetch(this._baseUrl+"/users/me/avatar",{method:"PATCH",headers:{authorization:this._auth,"Content-Type":"application/json"},body:JSON.stringify({avatar:n})}).then((function(e){return t._checkResponse(e)}))}},{key:"addCard",value:function(e){var t=this,n=e.name,r=e.link;return fetch(this._baseUrl+"/cards",{method:"POST",headers:{authorization:this._auth,"Content-Type":"application/json"},body:JSON.stringify({name:n,link:r})}).then((function(e){return t._checkResponse(e)}))}},{key:"likeCard",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:{authorization:this._auth,"Content-Type":"application/json"}}).then((function(e){return t._checkResponse(e)}))}},{key:"removeLike",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:{authorization:this._auth,"Content-Type":"application/json"}}).then((function(e){return t._checkResponse(e)}))}},{key:"deleteCard",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:{authorization:this._auth,"Content-Type":"application/json"}}).then((function(e){return t._checkResponse(e)}))}}])&&e(n.prototype,r),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t){var n=t.card,r=t.handleCardClick,o=t.handleDeleteClick,i=t.userData,a=t.handleLikeCard,u=t.templateSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=n.name,this._link=n.link,this._likedData=n.likes,this._timesLiked=n.likes.length,this._id=n._id,this._creatorName=n.owner.name,this._creatorId=n.owner._id,this._user=i._id,this._openPopup=r,this._handleDeleteClick=o,this._templateSelector=u,this._handleLikeCard=a}var t,r;return t=e,(r=[{key:"_toggleLikeStatus",value:function(e){var t=this;this._handleLikeCard(!e.target.classList.contains("card__heart_liked")).then((function(n){e.target.classList.toggle("card__heart_liked"),t._updateDisplayedLikes(e,n)})).catch((function(e){return console.error(e)}))}},{key:"_updateDisplayedLikes",value:function(e,t){this._newPlace.querySelector(".card__likes").textContent=t.likes.length}},{key:"_setEventListeners",value:function(){var e=this;this._deleteButton=this._newPlace.querySelector(".card__delete"),this._creatorId!==this._user?this._deleteButton.remove():this._deleteButton.addEventListener("click",(function(t){e._handleDeleteClick(t)})),this._likeButton=this._newPlace.querySelector(".card__heart"),this._likeButton.addEventListener("click",(function(t){e._toggleLikeStatus(t)})),this._placeImage=this._newPlace.querySelector(".card__image"),this._placeImage.addEventListener("click",(function(){e._openPopup(e._name,e._link)}))}},{key:"_getTemplate",value:function(){return document.querySelector(this._templateSelector).content.querySelector(".card").cloneNode(!0)}},{key:"_setLikedStatus",value:function(){var e=this;this._newPlace.querySelector(".card__likes").textContent=this._timesLiked,this._likedData.some((function(t){return t._id===e._user}))&&this._newPlace.querySelector(".card__heart").classList.add("card__heart_liked")}},{key:"createCard",value:function(){return this._newPlace=this._getTemplate(),this._setEventListeners(),this._newPlace.querySelector(".card__title").textContent=this._name,this._placeImage.src=this._link,this._placeImage.alt="".concat(this._name),this._setLikedStatus(),this._newPlace}}])&&n(t.prototype,r),e}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t){var n=t.renderer,r=t.containerSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=n,this._container=document.querySelector(r)}var t,n;return t=e,(n=[{key:"setItems",value:function(e){this._container.prepend(e)}},{key:"clear",value:function(){this._container.innerHTML=""}},{key:"renderItems",value:function(e){var t=this;this.clear(),e.forEach((function(e){t._renderer(e)}))}}])&&o(t.prototype,n),e}();function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this),this._handleOverlayClose=this._handleOverlayClose.bind(this)}var t,n;return t=e,(n=[{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.close()}},{key:"_handleOverlayClose",value:function(e){e.target.classList.contains("popup_opened")&&this.close()}},{key:"setEventListeners",value:function(){var e=this;this._popup.querySelector(".popup__close").addEventListener("click",(function(){e.close()}))}},{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose),document.addEventListener("click",this._handleOverlayClose)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose),document.removeEventListener("click",this._handleOverlayClose)}}])&&a(t.prototype,n),e}();function c(e){return(c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function l(e,t,n){return(l="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=h(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function f(e,t){return(f=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function p(e,t){return!t||"object"!==c(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function h(e){return(h=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&f(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=h(r);if(o){var n=h(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return p(this,e)});function a(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,e))._caption=t._popup.querySelector(".popup__caption"),t._image=t._popup.querySelector(".popup__image"),t}return t=a,(n=[{key:"open",value:function(e,t){this._caption.textContent=e,this._image.src=t,l(h(a.prototype),"open",this).call(this)}}])&&s(t.prototype,n),a}(u);function d(e){return(d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function v(e,t,n){return(v="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=k(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function m(e,t){return(m=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function b(e,t){return!t||"object"!==d(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function k(e){return(k=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&m(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=k(r);if(o){var n=k(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return b(this,e)});function a(e){var t,n=e.popupSelector,r=e.formSubmitHandler;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._form=t._popup.querySelector(".popup__form"),t._button=t._popup.querySelector(".popup__save-button"),t._formSubmitHandler=r,t}return t=a,(n=[{key:"_getInputValues",value:function(){var e=Array.from(this._popup.querySelectorAll(".popup__input")),t={};return e.forEach((function(e){t[e.name]=e.value})),t}},{key:"open",value:function(){v(k(a.prototype),"open",this).call(this),this._button.textContent="Save"}},{key:"setEventListeners",value:function(){var e=this;v(k(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._button.textContent="Saving...",e._formSubmitHandler(e._getInputValues())}))}},{key:"close",value:function(){v(k(a.prototype),"close",this).call(this),this._form.reset()}}])&&y(t.prototype,n),a}(u);function S(e){return(S="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function E(e,t,n){return(E="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=O(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function C(e,t){return(C=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function L(e,t){return!t||"object"!==S(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function O(e){return(O=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&C(e,t)}(a,e);var t,n,r,o,i=(r=a,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=O(r);if(o){var n=O(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return L(this,e)});function a(e){var t,n=e.popupSelector,r=e.formSubmitHandler;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,a),(t=i.call(this,n))._form=t._popup.querySelector(".popup__form"),t._button=t._popup.querySelector(".popup__save-button"),t._formSubmitHandler=r,t}return t=a,(n=[{key:"open",value:function(e,t){E(O(a.prototype),"open",this).call(this),this._button.textContent="Yes",this._cardId=t,this._card=e.target.parentElement}},{key:"setEventListeners",value:function(){var e=this;E(O(a.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._button.textContent="Deleting...",e._formSubmitHandler(e._card,e._cardId)}))}}])&&w(t.prototype,n),a}(u);function I(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var j=function(){function e(t){var n=t.name,r=t.about,o=t._id,i=t.avatar,a=t.nameElement,u=t.aboutElement,c=t.avatarElement;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=n,this._about=r,this._id=o,this._avatar=i,this._profileName=a,this._profileAbout=u,this._profileImage=c}var t,n;return t=e,(n=[{key:"updateUserInfo",value:function(e){var t=e.name,n=e.about,r=e._id,o=e.avatar;this._name=t||this._name,this._about=n||this._about,this._id=r||this._id,this._avatar=o||this._avatar}},{key:"removeAvatar",value:function(){this._profileImage.src="",this._profileImage.alt=""}},{key:"getUserInfo",value:function(){return{name:this._name,about:this._about,_id:this._id,avatar:this._avatar}}},{key:"renderUserInfo",value:function(){this._profileName.textContent=this._name,this._profileAbout.textContent=this._about,this._profileImage.src=this._avatar,this._profileImage.alt=this._name}}])&&I(t.prototype,n),e}();function R(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var q=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._input=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButton=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._form=n,this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputList=Array.from(n.querySelectorAll(this._input))}var t,n;return t=e,(n=[{key:"_showInputError",value:function(e,t){var n=this._form.querySelector(".popup__input-error_".concat(e.id));e.classList.add(this._inputErrorClass),n.textContent=t,n.classList.add(this._errorClass)}},{key:"_hideInputError",value:function(e){var t=this._form.querySelector(".popup__input-error_".concat(e.id));e.classList.remove(this._inputErrorClass),t.textContent="",t.classList.remove(this._errorClass)}},{key:"_checkInputValidity",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"_setEventListeners",value:function(){var e=this;this.toggleButtonState(),this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkInputValidity(t),e.toggleButtonState()}))}))}},{key:"_hasInvalidInput",value:function(e){return e.some((function(e){return!e.validity.valid}))}},{key:"toggleButtonState",value:function(){this._hasInvalidInput(this._inputList)?(this._submitButton.classList.add(this._inactiveButton),this._submitButton.disabled=!0):(this._submitButton.classList.remove(this._inactiveButton),this._submitButton.disabled=!1)}},{key:"enableValidation",value:function(){this._form.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&R(t.prototype,n),e}(),B=document.querySelector(".profile__edit-button"),T=document.querySelector(".popup__form_role_edit"),U=document.querySelector(".profile__avatar-overlay"),D=document.querySelector(".popup__form_role_avatar"),x=document.querySelector(".profile__add-button"),H=document.querySelector(".popup__form_role_add"),A=document.querySelector(".profile__name"),z=document.querySelector(".profile__title"),V=document.querySelector(".profile__avatar"),N=document.querySelector(".popup__input_role_name"),J=document.querySelector(".popup__input_role_title"),G={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__save-button",inactiveButtonClass:"popup__save-button_disabled",inputErrorClass:"popup__input_invalid",errorClass:"popup__input-error_active"},M=new t({baseUrl:"https://around.nomoreparties.co/v1/group-12",authorization:"9b815c88-30e1-42fa-b363-04c78bf0d633"}),Y=new q(G,H),F=new q(G,T),K=new q(G,D);F.enableValidation(),Y.enableValidation(),K.enableValidation();var Q=new j({nameElement:A,aboutElement:z,avatarElement:V}),W=new P({popupSelector:".popup_role_delete",formSubmitHandler:function(e,t){M.deleteCard(t).then((function(){e.remove(),W.close()})).catch((function(e){return console.error("Problem deleting card: ".concat(e))}))}}),X=function(e){return new r({card:e,handleCardClick:function(e,t){$.open(e,t)},handleDeleteClick:function(t){W.open(t,e._id)},userData:Q.getUserInfo(),handleLikeCard:function(t){return t?M.likeCard(e._id):M.removeLike(e._id)},templateSelector:"#place-template"})},Z=new i({renderer:function(e){var t=X(e);Z.setItems(t.createCard())},containerSelector:".cards"}),$=new _(".popup_role_image"),ee=new g({popupSelector:".popup_role_edit",formSubmitHandler:function(e){M.updateProfile(e).then((function(){Q.updateUserInfo(e),Q.renderUserInfo(),ee.close()})).catch((function(e){return console.error("Problem updating profile: ".concat(e))}))}}),te=new g({popupSelector:".popup_role_add",formSubmitHandler:function(e){M.addCard(e).then((function(e){var t=X(e);Z.setItems(t.createCard())})).then((function(){return te.close()})).catch((function(e){return console.error("Problem adding card: ".concat(e))}))}}),ne=new g({popupSelector:".popup_role_avatar",formSubmitHandler:function(e){Q.removeAvatar(),M.updateAvatar(e).then((function(){Q.updateUserInfo(e),Q.renderUserInfo(),ne.close()})).catch((function(e){return console.error("Problem updating avatar: ".concat(e))}))}});W.setEventListeners(),$.setEventListeners(),ee.setEventListeners(),te.setEventListeners(),ne.setEventListeners(),B.addEventListener("click",(function(){var e=Q.getUserInfo(),t=e.name,n=e.about;N.value=t,J.value=n,F.toggleButtonState(),ee.open()})),x.addEventListener("click",(function(){te.open(),Y.toggleButtonState()})),U.addEventListener("click",(function(){ne.open(),K.toggleButtonState()})),M.getUserInfo().then((function(e){Q.updateUserInfo(e)})).then((function(){M.getGroupCards().then((function(e){Z.renderItems(e.reverse())}))})).then((function(){Q.renderUserInfo()})).catch((function(e){return console.error("Problem rendering content: ".concat(e))}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,